/** @license ISC License (c) copyright 2016 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var VERSION = 1

var _implements = require('../core/implements')
var _inspect = require('../core/inspect')
var type = require('../core/types').type('Arrow')
var _type = require('../core/types').typeFn(type(), VERSION)
var fl = require('../core/flNames')

var isFunction = require('../core/isFunction')
var isSameType = require('../core/isSameType')

var Pair = require('../core/types').proxy('Pair')

var _id =
  function () { return Arrow(function (x) { return x; }); }

function Arrow(runWith) {
  var obj;

  if(!isFunction(runWith)) {
    throw new TypeError('Arrow: Function required')
  }

  var inspect =
    function () { return ("Arrow" + (_inspect(runWith))); }

  var id =
    _id

  function compose(m) {
    if(!(isSameType(Arrow, m))) {
      throw new TypeError('Arrow.compose: Arrow required')
    }

    return map(m.runWith)
  }

  function map(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Arrow.map: Function required')
    }

    return Arrow(function (x) { return fn(runWith(x)); })
  }

  function contramap(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Arrow.contramap: Function required')
    }

    return Arrow(function (x) { return runWith(fn(x)); })
  }

  function promap(l, r) {
    if(!isFunction(l) || !isFunction(r)) {
      throw new TypeError('Arrow.promap: Functions required for both arguments')
    }

    return Arrow(function (x) { return r(runWith(l(x))); })
  }

  function first() {
    return Arrow(function(x) {
      if(!(isSameType(Pair, x))) {
        throw TypeError('Arrow.first: Pair required for inner argument')
      }
      return x.bimap(runWith, function (x) { return x; })
    })
  }

  function second() {
    return Arrow(function(x) {
      if(!(isSameType(Pair, x))) {
        throw TypeError('Arrow.second: Pair required for inner argument')
      }

      return x.bimap(function (x) { return x; }, runWith)
    })
  }

  function both() {
    return Arrow(function(x) {
      if(!(isSameType(Pair, x))) {
        throw TypeError('Arrow.both: Pair required for inner argument')
      }
      return x.bimap(runWith, runWith)
    })
  }

  return ( obj = {
    inspect: inspect, toString: inspect, type: type,
    runWith: runWith, id: id, compose: compose, map: map, contramap: contramap,
    promap: promap, first: first, second: second, both: both
  }, obj[fl.id] = id, obj[fl.compose] = compose, obj[fl.contramap] = contramap, obj[fl.map] = map, obj[fl.promap] = promap, obj['@@type'] = _type, obj.constructor = Arrow, obj )
}

Arrow.id = _id
Arrow.type = type

Arrow[fl.id] = _id
Arrow['@@type'] = _type

Arrow['@@implements'] = _implements(
  [ 'compose', 'contramap', 'id', 'map', 'promap' ]
)

module.exports = Arrow
