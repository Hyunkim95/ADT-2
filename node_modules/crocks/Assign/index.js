/** @license ISC License (c) copyright 2016 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var VERSION = 1

var _implements = require('../core/implements')
var _inspect = require('../core/inspect')
var _object = require('../core/object')

var type = require('../core/types').type('Assign')
var _type = require('../core/types').typeFn(type(), VERSION)
var fl = require('../core/flNames')

var isNil = require('../core/isNil')
var isObject = require('../core/isObject')
var isSameType = require('../core/isSameType')

var _empty =
  function () { return Assign({}); }

function Assign(o) {
  var obj;

  var x = isNil(o) ? _empty().valueOf() : o

  if(!arguments.length || !isObject(x)) {
    throw new TypeError('Assign: Object required')
  }

  var valueOf =
    function () { return x; }

  var empty =
    _empty

  var inspect =
    function () { return ("Assign" + (_inspect(valueOf()))); }

  function concat(m) {
    if(!isSameType(Assign, m)) {
      throw new TypeError('Assign.concat: Assign required')
    }

    return Assign(_object.assign(m.valueOf(), x))
  }

  return ( obj = {
    inspect: inspect, toString: inspect,
    valueOf: valueOf, type: type, concat: concat, empty: empty
  }, obj[fl.empty] = empty, obj[fl.concat] = concat, obj['@@type'] = _type, obj.constructor = Assign, obj )
}

Assign['@@implements'] = _implements(
  [ 'concat', 'empty' ]
)

Assign.empty = _empty
Assign.type = type

Assign[fl.empty] = _empty
Assign['@@type'] = _type

module.exports = Assign
