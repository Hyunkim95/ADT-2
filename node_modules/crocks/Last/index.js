/** @license ISC License (c) copyright 2017 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var VERSION = 1

var _implements = require('../core/implements')
var _inspect = require('../core/inspect')
var type = require('../core/types').type('Last')
var _type = require('../core/types').typeFn(type(), VERSION)
var fl = require('../core/flNames')

var isSameType = require('../core/isSameType')

var Maybe = require('../core/Maybe')

var _empty =
  function () { return Last(Maybe.Nothing()); }

function Last(x) {
  var obj;

  if(!arguments.length) {
    throw new TypeError('Last: Requires one argument')
  }

  var maybe =
    !isSameType(Maybe, x) ? Maybe.of(x) : x.map(function (x) { return x; })

  var valueOf =
    function () { return maybe; }

  var empty =
    _empty

  var inspect =
    function () { return ("Last(" + (_inspect(maybe)) + " )"); }

  var option =
    maybe.option

  function concat(m) {
    if(!isSameType(Last, m)) {
      throw new TypeError('Last.concat: Last required')
    }

    var n =
      m.valueOf().map(function (x) { return x; })

    return Last(
      maybe.either(
        function () { return n; },
        function () { return n.either(function () { return maybe; }, function () { return n; }); }
      )
    )
  }

  return ( obj = {
    inspect: inspect, toString: inspect, concat: concat,
    empty: empty, option: option, type: type, valueOf: valueOf
  }, obj[fl.empty] = empty, obj[fl.concat] = concat, obj['@@type'] = _type, obj.constructor = Last, obj )
}

Last['@@implements'] = _implements(
  [ 'concat', 'empty' ]
)

Last.empty = _empty
Last.type = type

Last[fl.empty] = _empty
Last['@@type'] = _type

module.exports = Last
