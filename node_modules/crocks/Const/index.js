/** @license ISC License (c) copyright 2016 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var VERSION = 1

var _equals = require('../core/equals')
var _implements = require('../core/implements')
var _inspect = require('../core/inspect')
var type = require('../core/types').type('Const')
var _type = require('../core/types').typeFn(type(), VERSION)
var fl = require('../core/flNames')

var isFunction = require('../core/isFunction')
var isSameType = require('../core/isSameType')

function Const(x) {
  var obj;

  if(!arguments.length) {
    throw new TypeError('Const: Must wrap something')
  }

  var equals =
    function (m) { return isSameType(Const, m)
      && _equals(x, m.valueOf()); }

  var inspect =
    function () { return ("Const" + (_inspect(x))); }

  var valueOf =
    function () { return x; }

  function concat(m) {
    if(!isSameType(Const, m)) {
      throw new TypeError('Const.concat: Const required')
    }

    return Const(x)
  }

  function map(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Const.map: Function required')
    }

    return Const(x)
  }

  function ap(m) {
    if(!isSameType(Const, m)) {
      throw new TypeError('Const.ap: Const required')
    }

    return Const(x)
  }

  function chain(fn) {
    if(!isFunction(fn)) {
      throw new TypeError('Const.chain: Function required')
    }

    return Const(x)
  }

  return ( obj = {
    inspect: inspect, toString: inspect, valueOf: valueOf,
    type: type, equals: equals, concat: concat, map: map, ap: ap, chain: chain
  }, obj[fl.equals] = equals, obj[fl.concat] = concat, obj[fl.map] = map, obj[fl.chain] = chain, obj['@@type'] = _type, obj.constructor = Const, obj )
}

Const.type = type
Const['@@type'] = _type

Const['@@implements'] = _implements(
  [ 'ap', 'chain', 'concat', 'equals', 'map' ]
)

module.exports = Const
